{"ast":null,"code":"/**\n * \n * @param {运行的函数} fun \n * @param {时间间隔} duration \n * @returns 返回一个防抖函数\n */\nexport function debounce(fun, duration) {\n  var timer = null;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(function () {\n      fun.apply(void 0, args);\n    }, duration);\n  };\n}\n/**\n * \n * @param {运行的函数} func \n * @param {等待的时间} duration \n * @returns 基于时间差的节流函数\n */\n\nexport function throttle(func, duration) {\n  var pre = 0;\n  return function () {\n    var now = new Date();\n\n    if (now - pre > duration) {\n      func.apply(void 0, arguments);\n      pre = now;\n    }\n  };\n}\n/**\n * \n * @param {需要运行的函数} func \n * @param {等待的时间间隔} duration \n * @returns 一个基于记数的截流函数\n */\n\nexport function throttleCount(func, duration) {\n  var timer = null;\n  return function () {\n    if (!timer) {\n      func.apply(void 0, arguments);\n      timer = setTimeout(function () {\n        timer = null;\n      }, duration);\n    }\n  };\n}","map":{"version":3,"names":["debounce","fun","duration","timer","args","clearTimeout","setTimeout","throttle","func","pre","now","Date","throttleCount"],"sources":["/Users/linwinwin/Desktop/mysit2/mysite-client/src/utils/debounce.js"],"sourcesContent":["/**\n * \n * @param {运行的函数} fun \n * @param {时间间隔} duration \n * @returns 返回一个防抖函数\n */\nexport function debounce(fun, duration) {\n    let timer = null;\n    return function (...args) {\n        if (timer) clearTimeout(timer);\n        timer = setTimeout(() => {\n            fun(...args);\n        }, duration)\n    }\n}\n\n/**\n * \n * @param {运行的函数} func \n * @param {等待的时间} duration \n * @returns 基于时间差的节流函数\n */\nexport function throttle(func, duration) {\n    let pre = 0;\n    return function (...args) {\n        let now = new Date();\n        if (now - pre > duration) {\n            func(...args);\n            pre = now\n        }\n    }\n}\n\n/**\n * \n * @param {需要运行的函数} func \n * @param {等待的时间间隔} duration \n * @returns 一个基于记数的截流函数\n */\nexport function throttleCount(func, duration) {\n    let timer = null;\n    return function (...args) {\n        if (!timer) {\n            func(...args);\n            timer = setTimeout(() => {\n                timer = null;\n            }, duration)\n        }\n    }\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,QAAvB,EAAiC;EACpC,IAAIC,KAAK,GAAG,IAAZ;EACA,OAAO,YAAmB;IAAA,kCAANC,IAAM;MAANA,IAAM;IAAA;;IACtB,IAAID,KAAJ,EAAWE,YAAY,CAACF,KAAD,CAAZ;IACXA,KAAK,GAAGG,UAAU,CAAC,YAAM;MACrBL,GAAG,MAAH,SAAOG,IAAP;IACH,CAFiB,EAEfF,QAFe,CAAlB;EAGH,CALD;AAMH;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,QAAT,CAAkBC,IAAlB,EAAwBN,QAAxB,EAAkC;EACrC,IAAIO,GAAG,GAAG,CAAV;EACA,OAAO,YAAmB;IACtB,IAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;;IACA,IAAID,GAAG,GAAGD,GAAN,GAAYP,QAAhB,EAA0B;MACtBM,IAAI,MAAJ;MACAC,GAAG,GAAGC,GAAN;IACH;EACJ,CAND;AAOH;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,aAAT,CAAuBJ,IAAvB,EAA6BN,QAA7B,EAAuC;EAC1C,IAAIC,KAAK,GAAG,IAAZ;EACA,OAAO,YAAmB;IACtB,IAAI,CAACA,KAAL,EAAY;MACRK,IAAI,MAAJ;MACAL,KAAK,GAAGG,UAAU,CAAC,YAAM;QACrBH,KAAK,GAAG,IAAR;MACH,CAFiB,EAEfD,QAFe,CAAlB;IAGH;EACJ,CAPD;AAQH"},"metadata":{},"sourceType":"module"}