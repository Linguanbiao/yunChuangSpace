{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport getComponentRootDom from \"./getComponentRootDom.js\";\nimport styles from './showMessage.module.less';\nimport Icon from '../components/icon.vue';\n/**\n * 弹出消息，这里不做成 vue 组件，做成 vue 组件反而做复杂了\n * @param {String} content  消息内容\n * @param {String} type 消息类型 这里我们项目有四种消息类型  info  error  success  warm\n * @param {Number} duration  多久以后消失\n * @param {HTMLElement} container 容器，消息会显示到该容器的正中，如果不传，则默认显示到页面正中\n */\n\nexport default function () {\n  var opations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var content = opations.content || '';\n  var type = opations.type || 'info';\n  var duration = opations.duration || 2000;\n  var container = opations.container || document.body;\n  var div = document.createElement('div'); // 创建消息提示 div Dom 元素\n\n  var iconDom = getComponentRootDom(Icon, {\n    type: type\n  }); // 获得 Icon 的 dom 元素\n  // 设置了消息 div 的样式\n\n  div.innerHTML = \"<span class = \".concat(styles.icon, \">\").concat(iconDom.outerHTML, \"</span><div>\").concat(content, \"</div>\");\n  var typeClassName = styles[\"message-\".concat(type)]; // 这里使用的是 css module 保证类名样式不会冲突, 根据消息的类型渲染样式 ， 因此前面要加上 styles ，styles 在前面通过 css module 的形式导入了 ,\n\n  div.className = \"\".concat(styles.message, \" \").concat(typeClassName); // 将 div 加入到容器之中,位置要在容器中居中, 查看 container 的 position 是否更改过，默认的 position 属性为 static\n\n  if (opations.container) {\n    if (getComputedStyle(container).position === 'static') {\n      container.style.position = 'relative';\n    }\n  }\n\n  container.appendChild(div); //强行渲染一次，不然无法显示出现的动态效果，style 会被下面的样式代码覆盖，因此在这里先强行让消息元素先渲染一次\n\n  div.offsetWidth; // 查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等会导致 reflow\n  //回归消息元素到正常状态\n\n  div.style.opacity = 1;\n  div.style.transform = \"translate(-50% , -50%)\";\n  setTimeout(function () {\n    // setTimeout 是异步的，在宏队列中\n    div.style.opacity = 0;\n    div.style.transform = \"translate(-50% , -50%) translateY(-25px)\";\n    div.addEventListener('transitionend', function () {\n      div.remove; // opations.callback() //  元素消失，如果传了回调就要执行回调函数\n    }, {\n      once: true\n    }); // 消失时顺便把元素也删除了, 执行一次\n  }, duration);\n}","map":{"version":3,"names":["getComponentRootDom","styles","Icon","opations","content","type","duration","container","document","body","div","createElement","iconDom","innerHTML","icon","outerHTML","typeClassName","className","message","getComputedStyle","position","style","appendChild","offsetWidth","opacity","transform","setTimeout","addEventListener","remove","once"],"sources":["/Users/linwinwin/Desktop/mysit2/mysite-client/src/utils/showMessage.js"],"sourcesContent":["import getComponentRootDom from \"./getComponentRootDom.js\"\nimport styles from './showMessage.module.less'\nimport Icon from '../components/icon.vue'\n\n/**\n * 弹出消息，这里不做成 vue 组件，做成 vue 组件反而做复杂了\n * @param {String} content  消息内容\n * @param {String} type 消息类型 这里我们项目有四种消息类型  info  error  success  warm\n * @param {Number} duration  多久以后消失\n * @param {HTMLElement} container 容器，消息会显示到该容器的正中，如果不传，则默认显示到页面正中\n */\nexport default function (opations = {}) {\n    const content = opations.content || '';\n    const type = opations.type || 'info';\n    const duration = opations.duration || 2000;\n    const container = opations.container || document.body;\n    const div = document.createElement('div'); // 创建消息提示 div Dom 元素\n    const iconDom = getComponentRootDom(Icon, {\n        type\n    }) // 获得 Icon 的 dom 元素\n\n    // 设置了消息 div 的样式\n    div.innerHTML = `<span class = ${styles.icon}>${iconDom.outerHTML}</span><div>${content}</div>`;\n\n    const typeClassName = styles[`message-${type}`] // 这里使用的是 css module 保证类名样式不会冲突, 根据消息的类型渲染样式 ， 因此前面要加上 styles ，styles 在前面通过 css module 的形式导入了 ,\n    div.className = `${styles.message} ${typeClassName}`;\n\n    // 将 div 加入到容器之中,位置要在容器中居中, 查看 container 的 position 是否更改过，默认的 position 属性为 static\n    if (opations.container) {\n        if (getComputedStyle(container).position === 'static') {\n            container.style.position = 'relative';\n        }\n    }\n\n    container.appendChild(div);\n    //强行渲染一次，不然无法显示出现的动态效果，style 会被下面的样式代码覆盖，因此在这里先强行让消息元素先渲染一次\n    div.offsetWidth // 查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等会导致 reflow\n\n    //回归消息元素到正常状态\n    div.style.opacity = 1;\n    div.style.transform = `translate(-50% , -50%)`;\n\n    setTimeout(() => { // setTimeout 是异步的，在宏队列中\n        div.style.opacity = 0;\n        div.style.transform = `translate(-50% , -50%) translateY(-25px)`;\n        div.addEventListener('transitionend', function () {\n            div.remove;\n            // opations.callback() //  元素消失，如果传了回调就要执行回调函数\n        }, {\n            once: true\n        }) // 消失时顺便把元素也删除了, 执行一次\n    }, duration)\n}"],"mappings":";AAAA,OAAOA,mBAAP,MAAgC,0BAAhC;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,YAAyB;EAAA,IAAfC,QAAe,uEAAJ,EAAI;EACpC,IAAMC,OAAO,GAAGD,QAAQ,CAACC,OAAT,IAAoB,EAApC;EACA,IAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAT,IAAiB,MAA9B;EACA,IAAMC,QAAQ,GAAGH,QAAQ,CAACG,QAAT,IAAqB,IAAtC;EACA,IAAMC,SAAS,GAAGJ,QAAQ,CAACI,SAAT,IAAsBC,QAAQ,CAACC,IAAjD;EACA,IAAMC,GAAG,GAAGF,QAAQ,CAACG,aAAT,CAAuB,KAAvB,CAAZ,CALoC,CAKO;;EAC3C,IAAMC,OAAO,GAAGZ,mBAAmB,CAACE,IAAD,EAAO;IACtCG,IAAI,EAAJA;EADsC,CAAP,CAAnC,CANoC,CAQjC;EAEH;;EACAK,GAAG,CAACG,SAAJ,2BAAiCZ,MAAM,CAACa,IAAxC,cAAgDF,OAAO,CAACG,SAAxD,yBAAgFX,OAAhF;EAEA,IAAMY,aAAa,GAAGf,MAAM,mBAAYI,IAAZ,EAA5B,CAboC,CAaY;;EAChDK,GAAG,CAACO,SAAJ,aAAmBhB,MAAM,CAACiB,OAA1B,cAAqCF,aAArC,EAdoC,CAgBpC;;EACA,IAAIb,QAAQ,CAACI,SAAb,EAAwB;IACpB,IAAIY,gBAAgB,CAACZ,SAAD,CAAhB,CAA4Ba,QAA5B,KAAyC,QAA7C,EAAuD;MACnDb,SAAS,CAACc,KAAV,CAAgBD,QAAhB,GAA2B,UAA3B;IACH;EACJ;;EAEDb,SAAS,CAACe,WAAV,CAAsBZ,GAAtB,EAvBoC,CAwBpC;;EACAA,GAAG,CAACa,WAAJ,CAzBoC,CAyBpB;EAEhB;;EACAb,GAAG,CAACW,KAAJ,CAAUG,OAAV,GAAoB,CAApB;EACAd,GAAG,CAACW,KAAJ,CAAUI,SAAV;EAEAC,UAAU,CAAC,YAAM;IAAE;IACfhB,GAAG,CAACW,KAAJ,CAAUG,OAAV,GAAoB,CAApB;IACAd,GAAG,CAACW,KAAJ,CAAUI,SAAV;IACAf,GAAG,CAACiB,gBAAJ,CAAqB,eAArB,EAAsC,YAAY;MAC9CjB,GAAG,CAACkB,MAAJ,CAD8C,CAE9C;IACH,CAHD,EAGG;MACCC,IAAI,EAAE;IADP,CAHH,EAHa,CAQV;EACN,CATS,EASPvB,QATO,CAAV;AAUH"},"metadata":{},"sourceType":"module"}