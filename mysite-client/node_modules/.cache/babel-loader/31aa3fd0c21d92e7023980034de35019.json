{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getBanner } from \"@/api/banner\";\nimport Carouselitem from \"./Carouselitem.vue\";\nimport Icon from \"@/components/icon.vue\";\nimport Loading from \"@/components/Loading.vue\";\nimport fetchSet from \"@/mixins/fetchData.js\";\nimport Layout from \"../../components/Layout.vue\";\nexport default {\n  //mixins 这里用到了混合配置，配置了一些共有的配置\n  mixins: [fetchSet([])],\n  data: function data() {\n    return {\n      index: 0,\n      //  当前是第几个页面\n      containerHeight: 0,\n      // 整个容器的高度\n      swithing: false // 页面是否正在翻页中\n\n    };\n  },\n  components: {\n    Carouselitem: Carouselitem,\n    Icon: Icon,\n    Loading: Loading,\n    Layout: Layout\n  },\n  computed: {\n    margintop: function margintop() {\n      return -this.index * this.containerHeight + \"px\";\n    },\n    isArrowDownShow: function isArrowDownShow() {\n      if (this.data.length !== 0 && this.index !== this.data.length - 1) {\n        return true;\n      }\n\n      return false;\n    }\n  },\n  methods: {\n    //获取远程数据\n    fetchData: function fetchData() {\n      return getBanner();\n    },\n    turnUp: function turnUp() {\n      this.index = this.index - 1;\n    },\n    turnDown: function turnDown() {\n      this.index = this.index + 1;\n    },\n    handleWheel: function handleWheel(e) {\n      if (this.swithing || e.deltaY <= 5 && e.deltaY >= -5) {\n        return;\n      }\n\n      if (e.deltaY > 5 && this.index < this.data.length - 1) {\n        this.turnDown();\n        this.swithing = true;\n      } else if (e.deltaY < -5 && this.index > 0) {\n        this.swithing = true;\n        this.turnUp();\n      }\n    },\n    handleTransition: function handleTransition() {\n      // 当翻页完成以后就将 正在翻转状态 设为 false\n      this.swithing = false;\n    },\n    handleResize: function handleResize() {\n      this.containerHeight = this.$refs.container.clientHeight;\n    },\n    handleIndicator: function handleIndicator(i) {\n      this.index = i;\n    }\n  },\n\n  /** 下面这几个是 hook 函数，和组件的生命周期有关系 */\n  // beforeMount() {\n  //   this.isArrowDownShow = false;\n  // },\n  mounted: function mounted() {\n    this.containerHeight = this.$refs.container.clientHeight; // 监听窗口的高度变化，因为我们设置的 marginTop 依赖于窗口的高度\n\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  destroyed: function destroyed() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;EACAA,sBAFA;EAGAC,IAHA,kBAGA;IACA;MACAC,QADA;MACA;MACAC,kBAFA;MAEA;MACAC,eAHA,CAGA;;IAHA;EAKA,CATA;EAUAC;IACAC,0BADA;IAEAC,UAFA;IAGAC,gBAHA;IAIAC;EAJA,CAVA;EAiBAC;IACAC,SADA,uBACA;MACA;IACA,CAHA;IAIAC,eAJA,6BAIA;MACA;QACA;MACA;;MACA;IACA;EATA,CAjBA;EA4BAC;IACA;IACAC,SAFA,uBAEA;MACA;IACA,CAJA;IAKAC,MALA,oBAKA;MACA;IACA,CAPA;IAQAC,QARA,sBAQA;MACA;IACA,CAVA;IAWAC,WAXA,uBAWAC,CAXA,EAWA;MACA;QACA;MACA;;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;QACA;MACA;IACA,CAtBA;IAuBAC,gBAvBA,8BAuBA;MACA;MACA;IACA,CA1BA;IA2BAC,YA3BA,0BA2BA;MACA;IACA,CA7BA;IA8BAC,eA9BA,2BA8BAC,CA9BA,EA8BA;MACA;IACA;EAhCA,CA5BA;;EA+DA;EAEA;EACA;EACA;EACAC,OApEA,qBAoEA;IACA,yDADA,CAEA;;IACAC;EACA,CAxEA;EAyEAC,SAzEA,uBAyEA;IACAD;EACA;AA3EA","names":["mixins","data","index","containerHeight","swithing","components","Carouselitem","Icon","Loading","Layout","computed","margintop","isArrowDownShow","methods","fetchData","turnUp","turnDown","handleWheel","e","handleTransition","handleResize","handleIndicator","i","mounted","window","destroyed"],"sourceRoot":"src/views/HomePage","sources":["index.vue"],"sourcesContent":["<template>\n  <Layout>\n    <template #default>\n      <div class=\"home-page-container\" ref=\"container\" @wheel=\"handleWheel\">\n        <Loading v-if=\"isLoading\"></Loading>\n        <!--  这里动态设置 margin-top 只能用小驼峰样式 marginTop 就等于 margin-Top -->\n        <ul\n          class=\"carouse-container\"\n          :style=\"{ marginTop: margintop }\"\n          @transitionend=\"handleTransition\"\n        >\n          <li v-for=\"item in data\" :key=\"item.id\">\n            <carouselitem :carouse=\"item\"></carouselitem>\n          </li>\n        </ul>\n        <div class=\"icon icon-up\" @click=\"turnUp\" v-show=\"index !== 0\">\n          <Icon type=\"arrowUp\" class=\"icon-size\"></Icon>\n        </div>\n        <div class=\"icon icon-down\" @click=\"turnDown\" v-show=\"isArrowDownShow\">\n          <Icon type=\"arrowDown\" class=\"icon-size\"></Icon>\n        </div>\n        <ul class=\"indicator\">\n          <li\n            v-for=\"(item, i) in data\"\n            :key=\"item.id\"\n            :class=\"{ active: i === index }\"\n            @click=\"handleIndicator(i)\"\n          ></li>\n        </ul>\n      </div>\n    </template>\n  </Layout>\n</template>\n\n<script>\nimport { getBanner } from \"@/api/banner\";\nimport Carouselitem from \"./Carouselitem.vue\";\nimport Icon from \"@/components/icon.vue\";\nimport Loading from \"@/components/Loading.vue\";\nimport fetchSet from \"@/mixins/fetchData.js\";\nimport Layout from \"../../components/Layout.vue\";\nexport default {\n  //mixins 这里用到了混合配置，配置了一些共有的配置\n  mixins: [fetchSet([])],\n  data() {\n    return {\n      index: 0, //  当前是第几个页面\n      containerHeight: 0, // 整个容器的高度\n      swithing: false, // 页面是否正在翻页中\n    };\n  },\n  components: {\n    Carouselitem: Carouselitem,\n    Icon: Icon,\n    Loading: Loading,\n    Layout,\n  },\n\n  computed: {\n    margintop() {\n      return -this.index * this.containerHeight + \"px\";\n    },\n    isArrowDownShow() {\n      if (this.data.length !== 0 && this.index !== this.data.length - 1) {\n        return true;\n      }\n      return false;\n    },\n  },\n  methods: {\n    //获取远程数据\n    fetchData() {\n      return getBanner();\n    },\n    turnUp() {\n      this.index = this.index - 1;\n    },\n    turnDown() {\n      this.index = this.index + 1;\n    },\n    handleWheel(e) {\n      if (this.swithing || (e.deltaY <= 5 && e.deltaY >= -5)) {\n        return;\n      }\n      if (e.deltaY > 5 && this.index < this.data.length - 1) {\n        this.turnDown();\n        this.swithing = true;\n      } else if (e.deltaY < -5 && this.index > 0) {\n        this.swithing = true;\n        this.turnUp();\n      }\n    },\n    handleTransition() {\n      // 当翻页完成以后就将 正在翻转状态 设为 false\n      this.swithing = false;\n    },\n    handleResize() {\n      this.containerHeight = this.$refs.container.clientHeight;\n    },\n    handleIndicator(i) {\n      this.index = i;\n    },\n  },\n\n  /** 下面这几个是 hook 函数，和组件的生命周期有关系 */\n\n  // beforeMount() {\n  //   this.isArrowDownShow = false;\n  // },\n  mounted() {\n    this.containerHeight = this.$refs.container.clientHeight;\n    // 监听窗口的高度变化，因为我们设置的 marginTop 依赖于窗口的高度\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  destroyed() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n@import \"~@/style/var.less\";\n@import \"~@/style/mix.less\";\n.home-page-container {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden; //形成 BFC  就不会有外边距融合问题了\n  ul {\n    margin: 0;\n    list-style: none;\n    padding: 0;\n  }\n}\n\n.carouse-container {\n  width: 100%;\n  height: 100%;\n  color: #fff;\n  transition: 500ms;\n  li {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.icon {\n  .self-center();\n  color: @gray;\n  cursor: pointer;\n  transform: translateX(-50%);\n  @gap: 25px;\n  &.icon-up {\n    top: @gap;\n    animation: jump-up 2s infinite;\n  }\n  &.icon-down {\n    top: auto;\n    bottom: @gap;\n    animation: jump-down 2s infinite;\n  }\n  .icon-size {\n    font-size: 36px;\n  }\n}\n\n@jump: 5px;\n@keyframes jump-up {\n  0% {\n    transform: translate(-50%, @jump);\n  }\n  50% {\n    transform: translate(-50%, -@jump);\n  }\n  100% {\n    transform: translate(-50%, @jump);\n  }\n}\n\n@keyframes jump-down {\n  0% {\n    transform: translate(-50%, -@jump);\n  }\n  50% {\n    transform: translate(-50%, @jump);\n  }\n  100% {\n    transform: translate(-50%, -@jump);\n  }\n}\n\n.indicator {\n  .self-center();\n  transform: translateY(-50%);\n  left: auto;\n  right: 20px;\n  li {\n    width: 7px;\n    height: 7px;\n    border-radius: 50%;\n    background: @words;\n    cursor: pointer;\n    margin-bottom: 10px;\n    border: 1px solid #fff;\n    box-sizing: border-box;\n  }\n  .active {\n    background: #fff;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}