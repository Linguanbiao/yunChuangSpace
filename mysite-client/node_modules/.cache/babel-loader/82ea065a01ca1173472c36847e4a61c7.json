{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ImageLoader from \"@/components/ImageLoader.vue\";\nexport default {\n  props: [\"carouse\"],\n  data: function data() {\n    return {\n      titleWidth: 0,\n      descWidth: 0,\n      containerSize: null,\n      // 外层容器的尺寸\n      innerSize: null,\n      // 里层图片的尺寸\n      mouseX: 0,\n      //鼠标的横坐标\n      mouseY: 0 // 鼠标的纵坐标\n\n    };\n  },\n  components: {\n    ImageLoader: ImageLoader\n  },\n  computed: {\n    imagePosition: function imagePosition() {\n      if (!this.containerSize || !this.innerSize) {\n        return;\n      }\n\n      var extraWidth = this.innerSize.width - this.containerSize.width; // 图片多出来的宽\n\n      var extraHeight = this.innerSize.height - this.containerSize.height; // 图片多出来的高度\n\n      var left = -extraWidth / this.containerSize.width * this.mouseX;\n      var top = -extraHeight / this.containerSize.height * this.mouseY;\n      return {\n        left: left + \"px\",\n        top: top + \"px\"\n      };\n    },\n    center: function center() {\n      // 获取容器居中位置，让鼠标初始位置为图片中间点\n      return {\n        x: this.containerSize.width / 2,\n        y: this.containerSize.height / 2\n      };\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // 获取要显示的文本的宽度\n    this.titleWidth = this.$refs.title.clientWidth;\n    this.descWidth = this.$refs.desc.clientWidth;\n    setTimeout(function () {\n      _this.showWords();\n    }, 3000); // 为容器和图片的宽高赋值\n\n    this.handleSize(); // 监听容器和图片的宽高是否发生变化了， 是的话就调用 resize 函数\n\n    window.addEventListener(\"resize\", this.handleSize);\n    this.mouseX = this.center.x;\n    this.mouseY = this.center.y;\n  },\n  destroyed: function destroyed() {\n    // 销毁监听的 resize 事件\n    removeEventListener(\"resize\", this.handleSize);\n  },\n  methods: {\n    showWords: function showWords() {\n      // 显示文字函数，实现动画效果\n      this.$refs.title.style.width = 0; //上面两个步骤将文字的透明显示出来了，但是为了要动画，所以设置宽为 0\n\n      this.$refs.title.offsetHeight; // 强制渲染一次  reflow\n\n      this.$refs.title.style.transition = \"1s\";\n      this.$refs.title.style.opacity = 0.8;\n      this.$refs.title.style.width = this.titleWidth + \"px\";\n      this.$refs.desc.style.width = 0; //上面两个步骤将文字的透明显示出来了，但是为了要动画，所以设置宽为 0\n\n      this.$refs.desc.offsetHeight; // 强制渲染一次  reflow\n\n      this.$refs.desc.style.transition = \"2s 1s\"; // 总共 2s 完成动画，延迟 1s 开始动画\n\n      this.$refs.desc.style.opacity = 0.5;\n      this.$refs.desc.style.width = this.descWidth + \"px\";\n    },\n    handleSize: function handleSize() {\n      this.containerSize = {\n        width: this.$refs.container.clientWidth,\n        height: this.$refs.container.clientHeight\n      };\n      this.innerSize = {\n        width: this.$refs.img.clientWidth,\n        height: this.$refs.img.clientHeight\n      };\n    },\n    handleMouseMove: function handleMouseMove(e) {\n      var rect = this.$refs.container.getBoundingClientRect();\n      this.mouseX = e.clientX - rect.left;\n      this.mouseY = e.clientY - rect.top;\n    },\n    handleMouseLeave: function handleMouseLeave() {\n      this.mouseX = this.containerSize.width / 2;\n      this.mouseY = this.containerSize.height / 2;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAmBA;AACA;EACAA,kBADA;EAEAC,IAFA,kBAEA;IACA;MACAC,aADA;MAEAC,YAFA;MAGAC,mBAHA;MAGA;MACAC,eAJA;MAIA;MACAC,SALA;MAKA;MACAC,SANA,CAMA;;IANA;EAQA,CAXA;EAYAC;IACAC;EADA,CAZA;EAeAC;IACAC,aADA,2BACA;MACA;QACA;MACA;;MACA,iEAJA,CAIA;;MACA,oEALA,CAKA;;MACA;MACA;MACA;QACAC,iBADA;QAEAC;MAFA;IAIA,CAbA;IAcAC,MAdA,oBAcA;MACA;MACA;QACAC,+BADA;QAEAC;MAFA;IAIA;EApBA,CAfA;EAqCAC,OArCA,qBAqCA;IAAA;;IACA;IACA;IACA;IAEAC;MACA;IACA,CAFA,EAEA,IAFA,EALA,CAQA;;IACA,kBATA,CAUA;;IACAC;IAEA;IACA;EACA,CApDA;EAqDAC,SArDA,uBAqDA;IACA;IACAC;EACA,CAxDA;EAyDAC;IACAC,SADA,uBACA;MACA;MAEA,iCAHA,CAIA;;MACA,8BALA,CAKA;;MACA;MACA;MACA;MAEA,gCAVA,CAWA;;MACA,6BAZA,CAYA;;MACA,2CAbA,CAaA;;MACA;MACA;IACA,CAjBA;IAkBAC,UAlBA,wBAkBA;MACA;QACAC,uCADA;QAEAC;MAFA;MAIA;QACAD,iCADA;QAEAC;MAFA;IAIA,CA3BA;IA4BAC,eA5BA,2BA4BAC,CA5BA,EA4BA;MACA;MACA;MACA;IACA,CAhCA;IAiCAC,gBAjCA,8BAiCA;MACA;MACA;IACA;EApCA;AAzDA","names":["props","data","titleWidth","descWidth","containerSize","innerSize","mouseX","mouseY","components","ImageLoader","computed","imagePosition","left","top","center","x","y","mounted","setTimeout","window","destroyed","removeEventListener","methods","showWords","handleSize","width","height","handleMouseMove","e","handleMouseLeave"],"sourceRoot":"src/views/HomePage","sources":["Carouselitem.vue"],"sourcesContent":["<template>\n  <div\n    class=\"Carouse-item-container\"\n    ref=\"container\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"handleMouseLeave\"\n  >\n    <div class=\"carouse-img\" :style=\"imagePosition\" ref=\"img\">\n      <ImageLoader\n        :src=\"carouse.bigImg\"\n        :placeholder=\"carouse.midImg\"\n      ></ImageLoader>\n    </div>\n    <div class=\"title\" ref=\"title\">{{ carouse.title }}</div>\n    <div class=\"description\" ref=\"desc\">{{ carouse.description }}</div>\n  </div>\n</template>\n\n<script>\nimport ImageLoader from \"@/components/ImageLoader.vue\";\nexport default {\n  props: [\"carouse\"],\n  data() {\n    return {\n      titleWidth: 0,\n      descWidth: 0,\n      containerSize: null, // 外层容器的尺寸\n      innerSize: null, // 里层图片的尺寸\n      mouseX: 0, //鼠标的横坐标\n      mouseY: 0, // 鼠标的纵坐标\n    };\n  },\n  components: {\n    ImageLoader: ImageLoader,\n  },\n  computed: {\n    imagePosition() {\n      if (!this.containerSize || !this.innerSize) {\n        return;\n      }\n      const extraWidth = this.innerSize.width - this.containerSize.width; // 图片多出来的宽\n      const extraHeight = this.innerSize.height - this.containerSize.height; // 图片多出来的高度\n      const left = (-extraWidth / this.containerSize.width) * this.mouseX;\n      const top = (-extraHeight / this.containerSize.height) * this.mouseY;\n      return {\n        left: left + \"px\",\n        top: top + \"px\",\n      };\n    },\n    center() {\n      // 获取容器居中位置，让鼠标初始位置为图片中间点\n      return {\n        x: this.containerSize.width / 2,\n        y: this.containerSize.height / 2,\n      };\n    },\n  },\n  mounted() {\n    // 获取要显示的文本的宽度\n    this.titleWidth = this.$refs.title.clientWidth;\n    this.descWidth = this.$refs.desc.clientWidth;\n\n    setTimeout(() => {\n      this.showWords();\n    }, 3000);\n    // 为容器和图片的宽高赋值\n    this.handleSize();\n    // 监听容器和图片的宽高是否发生变化了， 是的话就调用 resize 函数\n    window.addEventListener(\"resize\", this.handleSize);\n\n    this.mouseX = this.center.x;\n    this.mouseY = this.center.y;\n  },\n  destroyed() {\n    // 销毁监听的 resize 事件\n    removeEventListener(\"resize\", this.handleSize);\n  },\n  methods: {\n    showWords() {\n      // 显示文字函数，实现动画效果\n\n      this.$refs.title.style.width = 0;\n      //上面两个步骤将文字的透明显示出来了，但是为了要动画，所以设置宽为 0\n      this.$refs.title.offsetHeight; // 强制渲染一次  reflow\n      this.$refs.title.style.transition = \"1s\";\n      this.$refs.title.style.opacity = 0.8;\n      this.$refs.title.style.width = this.titleWidth + \"px\";\n\n      this.$refs.desc.style.width = 0;\n      //上面两个步骤将文字的透明显示出来了，但是为了要动画，所以设置宽为 0\n      this.$refs.desc.offsetHeight; // 强制渲染一次  reflow\n      this.$refs.desc.style.transition = \"2s 1s\"; // 总共 2s 完成动画，延迟 1s 开始动画\n      this.$refs.desc.style.opacity = 0.5;\n      this.$refs.desc.style.width = this.descWidth + \"px\";\n    },\n    handleSize() {\n      this.containerSize = {\n        width: this.$refs.container.clientWidth,\n        height: this.$refs.container.clientHeight,\n      };\n      this.innerSize = {\n        width: this.$refs.img.clientWidth,\n        height: this.$refs.img.clientHeight,\n      };\n    },\n    handleMouseMove(e) {\n      const rect = this.$refs.container.getBoundingClientRect();\n      this.mouseX = e.clientX - rect.left;\n      this.mouseY = e.clientY - rect.top;\n    },\n    handleMouseLeave() {\n      this.mouseX = this.containerSize.width / 2;\n      this.mouseY = this.containerSize.height / 2;\n    },\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n@import \"~@/style/var.less\";\n.Carouse-item-container {\n  height: 100%;\n  width: 100%;\n  color: #fff;\n  overflow: hidden;\n  position: relative;\n}\n.carouse-img {\n  height: 110%;\n  width: 110%;\n  position: absolute;\n  transition: 0.1s;\n}\n.title,\n.description {\n  position: absolute;\n  letter-spacing: 3px; // 字体间距\n  left: 30px;\n  color: #fff;\n  opacity: 0; // 起先设置为 0 ， 为了有动画效果\n  overflow: hidden;\n  white-space: nowrap; // 设置不能换行\n  text-shadow: 1px 0 0 rgba(0, 0, 0, 0.5), -1px 0 0 rgba(0, 0, 0, 0.5),\n    0 1px 0 rgba(0, 0, 0, 0.5), 0 -1px 0 rgba(0, 0, 0, 0.5); // 字体四周描边\n}\n.title {\n  top: calc(80% - 40px);\n  font-size: 2em;\n}\n.description {\n  top: calc(80% + 20px);\n  font-size: 1.2em;\n  color: lighten(@gray, 20%);\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}