{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Loading from \"@/components/Loading.vue\";\nimport RightList from \"@/views/Blog/RightList.vue\";\nimport fetch from \"@/mixins/fetchData.js\";\nimport { debounce } from \"@/utils/debounce.js\";\nimport { getBlog } from \"@/api/blog.js\";\nexport default {\n  mixins: [fetch({})],\n  components: {\n    Loading,\n    RightList\n  },\n\n  data() {\n    return {\n      activeAnchor: \"\"\n    };\n  },\n\n  computed: {\n    //获取文章的 ID\n    getBlogId() {\n      const blogId = this.$route.params.id;\n      return blogId;\n    },\n\n    // 根据 data.toc 属性以及 activeAnchor得到带有 isSelected 属性的 toc 数组\n    tocWithSelected() {\n      const getToc = (toc = []) => {\n        return toc.map(item => ({ ...item,\n          isSelected: item.anchor === this.activeAnchor,\n          childrenList: getToc(item.childrenList) // 递归子元素\n\n        }));\n      };\n\n      return getToc(this.data.toc);\n    },\n\n    doms() {\n      //获取页面每个带有 anchor id 的 dom 元素方便后面控制滚动选中状态\n      const doms = [];\n\n      const addToDoms = toc => {\n        for (const t of toc) {\n          doms.push(document.getElementById(t.anchor));\n\n          if (t.childrenList && t.childrenList.length) {\n            addToDoms(t.childrenList);\n          }\n        }\n      };\n\n      addToDoms(this.data.toc);\n      return doms;\n    }\n\n  },\n  methods: {\n    async fetchData() {\n      return await getBlog(this.getBlogId);\n    },\n\n    handleSelect(item) {\n      //这个函数处理的是根据目录点击的状态，博客显示到相应的位置\n      location.hash = item.anchor;\n    },\n\n    setSelected() {\n      //这个函数是设置 activeAnchor 为正确的值，为了计算属性中标记为被选中样式\n      this.activeAnchor = \"\"; //设置规定的范围大小\n\n      const range = 150;\n\n      for (const dom of this.doms) {\n        // 依次遍历 doms 数组里面的每个dom 元素，设置是否为选中状态\n        if (!dom) {\n          continue;\n        } //获取dom元素距离视口的高度\n\n\n        const top = dom.getBoundingClientRect().top;\n\n        if (top >= 0 && top <= range) {\n          //在规定的范围内，设置为选中状态\n          this.activeAnchor = dom.id;\n          return;\n        } else if (top > range) {\n          //在规定的范围下方 ， 一定是不激活的\n          return;\n        } else {\n          //在规定的范围上方, 可以先假设是激活的，后面的 dom 元素的状态会覆盖的\n          this.activeAnchor = dom.id;\n        }\n      }\n    }\n\n  },\n\n  mounted() {\n    // 在实例创建后，就会事件在事件总线上添加一个监听事件 , $bus 为eventBus.js中绑定在Vue原型中的一个事件总线\n\n    /**\n     *当 mainScroll 事件被总线抛出，在这里监听到，就运行一次 setSelected() 函数\n     *为 setSelected 添加一个防抖函数\n     */\n    this.debounceSetSelected = debounce(this.setSelected, 50);\n    this.$bus.$on(\"mainScroll\", this.debounceSetSelected);\n  },\n\n  destroyed() {\n    // 销毁监听事件\n    this.$bus.$off(\"mainScroll\", this.debounceSetSelected);\n  }\n\n};","map":{"version":3,"mappings":";;;;;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AAEA;EACAA,mBADA;EAEAC;IACAC,OADA;IAEAC;EAFA,CAFA;;EAMAC;IACA;MACAC;IADA;EAGA,CAVA;;EAWAC;IACA;IACAC;MACA;MACA;IACA,CALA;;IAMA;IACAC;MACA;QACA,0BACA,OADA;UAEAC,6CAFA;UAGAC,uCAHA,CAGA;;QAHA;MAKA,CANA;;MAOA;IACA,CAhBA;;IAiBAC;MACA;MACA;;MACA;QACA;UACAA;;UACA;YACAC;UACA;QACA;MACA,CAPA;;MAQAA;MACA;IACA;;EA9BA,CAXA;EA2CAC;IACA;MACA;IACA,CAHA;;IAIAC;MACA;MACAC;IACA,CAPA;;IAQAC;MACA;MACA,uBAFA,CAGA;;MACA;;MACA;QACA;QACA;UACA;QACA,CAJA,CAKA;;;QACA;;QACA;UACA;UACA;UACA;QACA,CAJA,MAIA;UACA;UACA;QACA,CAHA,MAGA;UACA;UACA;QACA;MACA;IACA;;EAhCA,CA3CA;;EA6EAC;IACA;;IACA;AACA;AACA;AACA;IACA;IACA;EACA,CArFA;;EAsFAC;IACA;IACA;EACA;;AAzFA","names":["mixins","components","Loading","RightList","data","activeAnchor","computed","getBlogId","tocWithSelected","isSelected","childrenList","doms","addToDoms","methods","handleSelect","location","setSelected","mounted","destroyed"],"sourceRoot":"src/views/Blog/BlogDetails","sources":["BlogToc.vue"],"sourcesContent":["<template>\n  <div class=\"blog-toc-container\">\n    <Loading v-if=\"isLoading\"></Loading>\n    <h2 v-if=\"Object.keys(data).length !== 0\">文章目录</h2>\n    <RightList\n      v-if=\"Object.keys(data).length !== 0\"\n      :list=\"tocWithSelected\"\n      @select=\"handleSelect\"\n    ></RightList>\n  </div>\n</template>\n\n<script>\nimport Loading from \"@/components/Loading.vue\";\nimport RightList from \"@/views/Blog/RightList.vue\";\nimport fetch from \"@/mixins/fetchData.js\";\nimport { debounce } from \"@/utils/debounce.js\";\nimport { getBlog } from \"@/api/blog.js\";\n\nexport default {\n  mixins: [fetch({})],\n  components: {\n    Loading,\n    RightList,\n  },\n  data() {\n    return {\n      activeAnchor: \"\",\n    };\n  },\n  computed: {\n    //获取文章的 ID\n    getBlogId() {\n      const blogId = this.$route.params.id;\n      return blogId;\n    },\n    // 根据 data.toc 属性以及 activeAnchor得到带有 isSelected 属性的 toc 数组\n    tocWithSelected() {\n      const getToc = (toc = []) => {\n        return toc.map((item) => ({\n          ...item,\n          isSelected: item.anchor === this.activeAnchor,\n          childrenList: getToc(item.childrenList), // 递归子元素\n        }));\n      };\n      return getToc(this.data.toc);\n    },\n    doms() {\n      //获取页面每个带有 anchor id 的 dom 元素方便后面控制滚动选中状态\n      const doms = [];\n      const addToDoms = (toc) => {\n        for (const t of toc) {\n          doms.push(document.getElementById(t.anchor));\n          if (t.childrenList && t.childrenList.length) {\n            addToDoms(t.childrenList);\n          }\n        }\n      };\n      addToDoms(this.data.toc);\n      return doms;\n    },\n  },\n  methods: {\n    async fetchData() {\n      return await getBlog(this.getBlogId);\n    },\n    handleSelect(item) {\n      //这个函数处理的是根据目录点击的状态，博客显示到相应的位置\n      location.hash = item.anchor;\n    },\n    setSelected() {\n      //这个函数是设置 activeAnchor 为正确的值，为了计算属性中标记为被选中样式\n      this.activeAnchor = \"\";\n      //设置规定的范围大小\n      const range = 150;\n      for (const dom of this.doms) {\n        // 依次遍历 doms 数组里面的每个dom 元素，设置是否为选中状态\n        if (!dom) {\n          continue;\n        }\n        //获取dom元素距离视口的高度\n        const top = dom.getBoundingClientRect().top;\n        if (top >= 0 && top <= range) {\n          //在规定的范围内，设置为选中状态\n          this.activeAnchor = dom.id;\n          return;\n        } else if (top > range) {\n          //在规定的范围下方 ， 一定是不激活的\n          return;\n        } else {\n          //在规定的范围上方, 可以先假设是激活的，后面的 dom 元素的状态会覆盖的\n          this.activeAnchor = dom.id;\n        }\n      }\n    },\n  },\n  mounted() {\n    // 在实例创建后，就会事件在事件总线上添加一个监听事件 , $bus 为eventBus.js中绑定在Vue原型中的一个事件总线\n    /**\n     *当 mainScroll 事件被总线抛出，在这里监听到，就运行一次 setSelected() 函数\n     *为 setSelected 添加一个防抖函数\n     */\n    this.debounceSetSelected = debounce(this.setSelected, 50);\n    this.$bus.$on(\"mainScroll\", this.debounceSetSelected);\n  },\n  destroyed() {\n    // 销毁监听事件\n    this.$bus.$off(\"mainScroll\", this.debounceSetSelected);\n  },\n};\n</script>\n\n<style lang=\"less\" scoped>\n.blog-toc-container {\n  width: 250px;\n  height: 100%;\n  position: relative;\n  white-space: nowrap;\n  box-sizing: border-box;\n  padding: 20px;\n  padding-top: 10px;\n  overflow: auto;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}